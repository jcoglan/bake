#!/usr/bin/env python3

import os
import re
import sys

from pygments import highlight
from pygments.formatters import HtmlFormatter
from pygments.lexers import get_lexer_by_name
from xml.dom.minidom import Node, parse, parseString


format = sys.argv[1]
target = sys.argv[2]
path   = sys.argv[3]
xml    = parse(target)

sys.path.append(path)
import syntax


def get_theme(type):
    settings = syntax.PYGMENTS_THEME
    for tags in settings:
        if type in tags: return settings[tags]
    print('missing syntax type: ' + type)
    return {}


def fix_formalpara(para):
    listing = para.getElementsByTagName('programlisting')
    if len(listing) == 0:
        listing = para.getElementsByTagName('screen')

    listing = listing[0]
    title   = para.getElementsByTagName('title')[0]
    parent  = para.parentNode
    figure  = xml.createElement('figure')

    id = para.getAttribute('id')
    if id: figure.setAttribute('id', id)

    parent.insertBefore(figure, para)
    figure.appendChild(title)
    figure.appendChild(listing)
    parent.removeChild(para)


def highlight_block(xml, block, format):
    for child in block.childNodes:
        if child.nodeType != Node.TEXT_NODE: continue

        pattern = '^#:highlight: (\S+)\n'
        code    = child.nodeValue
        match   = re.search(pattern, code)

        if match == None: continue

        lexer = get_lexer_by_name(match.group(1))
        code  = re.sub(pattern, '', code)

        doc = parseString(highlight(code, lexer, HtmlFormatter()))
        pre = doc.getElementsByTagName('pre')[0]

        for node in pre.childNodes:
            if node.nodeType == Node.TEXT_NODE:
                block.insertBefore(xml.createTextNode(node.nodeValue), child)
            else:
                span = highlight_node(xml, node, format)
                if span: block.insertBefore(span, child)

        block.removeChild(child)


def highlight_node(xml, node, format):
    if not node.childNodes: return None

    theme  = get_theme(node.getAttribute('class'))
    bg     = theme.get('background', 'transparent')
    color  = theme.get('color', '#000')
    style  = theme.get('style', 'normal')
    weight = theme.get('weight', 'normal')

    if format == 'fo':
        span = xml.createElement('fo:inline')
        span.setAttribute('background-color', bg)
        span.setAttribute('color', color)
        span.setAttribute('font-style', style)
        span.setAttribute('font-weight', weight)
    elif format == 'html':
        span = xml.createElement('code')
        css = 'background-color: ' + bg + '; color: ' + color + '; font-style: ' + style + '; font-weight: ' + weight
        span.setAttribute('style', css)

    text = node.childNodes[0].nodeValue
    span.appendChild(xml.createTextNode(text))

    return span


if format == 'docbook':
    for para in xml.getElementsByTagName('formalpara'):
        fix_formalpara(para)

    for listing in xml.getElementsByTagName('programlisting'):
        lang = listing.getAttribute('language')
        code = listing.childNodes[0].nodeValue
        text = xml.createTextNode('#:highlight: ' + lang + '\n' + code)

        listing.removeChild(listing.childNodes[0])
        listing.appendChild(text)

elif format == 'fo':
    for block in xml.getElementsByTagName('fo:block'):
        highlight_block(xml, block, 'fo')

elif format == 'html':
    for block in xml.getElementsByTagName('pre'):
        if block.getAttribute('class') == 'programlisting':
            highlight_block(xml, block, 'html')


file = open(target, 'w')
file.write(xml.toxml())
file.close()
